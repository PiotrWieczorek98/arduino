/**
 * MIDI-Arduino Sequencing code translator
 * Courtesy of http://greenlightgo.org/projects/midi-to-arduino/
 **/

/********************************
 * sequence.h
 ********************************/
#ifndef SEQUENCE_H
#define SEQUENCE_H

#include <Servo.h>

class Sequence {
  protected:
    int index;
    int pin;
    int length;
    long lastEventTimestamp;
    const unsigned int* eventDeltas;
  
    virtual void doEvent();

  public:
    Sequence(const int pin, const int length, const unsigned int* eventDeltas);
    void update(const long time);
    virtual void init();
};

class DigitalSequence : public Sequence{  
  protected:
    void doEvent();

  public:
    DigitalSequence(const int pin, const int length, const unsigned int* eventDeltas);
    void init();

};

class ToneSequence : public Sequence{
  protected:
    const unsigned int* notes;    
    void doEvent();
    
  public:
    ToneSequence(const int pin, const int length, const unsigned int* eventDeltas, const unsigned int* notes);
    void init();
};

class ServoSequence : public Sequence{
  protected:
    Servo servo;    
    const byte* angles;
    void doEvent();
    
  public:
    ServoSequence(const int pin, const int length, const unsigned int* eventDeltas, const uint8_t* angles);
    void init();
};

class PWMSequence : public Sequence{
  protected:
    const byte* values;
    void doEvent();
    
  public:
    PWMSequence(const int pin, const int length, const unsigned int* eventDeltas, const uint8_t* values);
    void init();
};

#endif

/********************************
 * sequence.cpp
 ********************************/
// Sequence implementations
Sequence::Sequence(const int pin, const int length, const unsigned int* eventDeltas){
  pinMode(pin, OUTPUT);
  this->pin = pin;
  this->length = length;
  this->index = 0;
  this->lastEventTimestamp = 0l;
  
  this->eventDeltas = eventDeltas;
}

void Sequence::update(const long time){
  while(index < length){
    unsigned int nextTimestamp = pgm_read_word_near(eventDeltas+index);
    if((time - lastEventTimestamp) > nextTimestamp){
      this->doEvent();
      lastEventTimestamp += nextTimestamp;
      index++;
    }else{
      break;
    }
  }
}

void Sequence::init(){}
void Sequence::doEvent(){}


// DigitalSequence implementations
DigitalSequence::DigitalSequence(const int pin, const int length, const unsigned int* eventDeltas) : Sequence(pin, length, eventDeltas){
  pinMode(pin, OUTPUT);
}
    
void DigitalSequence::init(){
  pinMode(pin, OUTPUT);
}

void DigitalSequence::doEvent(){
  digitalWrite(pin, (this->index + 1)%2);
}


// ToneSequence implementations
ToneSequence::ToneSequence(const int pin, const int length, const unsigned int* eventDeltas, const unsigned int* notes) : Sequence(pin, length, eventDeltas){
  this->notes = notes;
}

void ToneSequence::init(){
  pinMode(pin, OUTPUT);
}

void ToneSequence::doEvent(){
  if(index % 2 == 1){
    noTone(pin);
  }else{
    tone(pin, pgm_read_word_near(notes+index/2));
  }
}


// ServoSequence implementations
ServoSequence::ServoSequence(const int pin, const int length, const unsigned int* eventDeltas, const uint8_t* angles) : Sequence(pin, length, eventDeltas){
  this->angles = angles;
}

void ServoSequence::init(){
  this->servo.attach(pin);
}

void ServoSequence::doEvent(){
  byte angle = pgm_read_byte_near(angles+index);
  servo.write(angle);
}


// PWMSequence implementations
PWMSequence::PWMSequence(const int pin, const int length, const unsigned int* eventDeltas, const uint8_t* values) : Sequence(pin, length, eventDeltas){
  this->values = values;
}

void PWMSequence::init(){
  pinMode(pin, OUTPUT);
}

void PWMSequence::doEvent(){
  byte value = pgm_read_byte_near(values+index);
  analogWrite(pin, value);
}


#define TRACK_COUNT 1

const PROGMEM unsigned int DELTAS_3[] = {96, 48, 0, 48, 0, 48, 0, 72, 24, 48, 0, 48, 0, 48, 0, 48, 0, 72, 24, 48, 0, 48, 144, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 0, 144, 0, 0, 0, 144, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 0, 288, 0, 96, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 0, 144, 0, 0, 0, 144, 0, 0, 0, 96, 0, 0, 96, 0, 96, 0, 96, 0, 216, 168, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 48, 0, 144, 0, 96, 0, 96, 0, 96, 0, 96, 96, 96, 0, 96, 0, 120, 72, 96, 0, 96, 0, 120, 72, 192, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 216, 168, 48, 0, 48, 0, 96, 0, 48, 0, 48, 0, 96, 0, 48, 0, 144, 0, 96, 0, 96, 0, 96, 0, 120, 72, 96, 0, 96, 0, 120, 72, 96, 0, 96, 0, 120, 72, 192, 0, 96, 0, 96, 0, 96, 0, 96, 96, 48, 0, 96, 0, 144, 0, 96, 0, 48, 0, 96, 0, 144, 0, 96, 0, 48, 0, 96, 0, 48, 0, 96, 0, 120, 72, 96, 0, 96, 0, 192, 0, 192, 0, 96, 0, 96, 0, 120, 72, 192, 0, 192, 0, 96, 0, 96, 0, 96, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 144, 0, 48, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 96, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 192, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 144, 0, 48, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 96, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 192, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 144, 0, 48, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 0, 48, 0, 0, 0, 48, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 96, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 96, 0, 0, 0, 96, 0, 0, 0, 120, 0, 72, 0, 192, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 96, 48, 0, 144, 0, 96, 0, 96, 0, 48, 0, 144, 0, 96, 0, 96, 0, 48, 0, 144, 0, 96, 0, 120, 72, 96, 0, 96, 0, 192, 0, 192, 0, 96, 0, 96, 0, 96, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 48, 0, 48, 0, 48, 0, 48, 0, 72, 24, 48, 0, 48, 0, 48, 0, 48, 0, 72, 283, 0, 24, 0, 72, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 96, 0, 0, 0, 48, 0, 144, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 0, 96, 0, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 0, 96, 0, 0, 48, 0, 96, 0, 48, 0, 96, 0, 0, 96, 0, 0, 48, 0, 96, 0, 48, 0, 96, 0, 0, 96, 0, 0, 48, 0, 144, 0, 0, 96, 0, 0, 0, 144, 0, 0, 144, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 96, 0, 96, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 48, 0, 144, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 96, 0, 0, 0, 96, 0, 0, 48, 0, 48, 0, 48, 0, 48, 0, 144, 0, 144, 0, 96, 0, 0, 144, 0, 0, 144, 0, 96, 0, 0, 144, 0, 0, 144, 0, 96, 0, 0, 144, 0, 0, 0, 144, 0, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 96, 0, 96, 0, 96, 0, 48, 0, 48, 0, 48, 96, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0, 48, 0, 48, 0, 0, 0, 48, 0, 0, 0, 48, 0};
const PROGMEM unsigned int NOTES_3[] = {247, 220, 247, 294, 220, 247, 220, 247, 294, 220, 247, 294, 587, 220, 440, 294, 587, 330, 659, 440, 220, 659, 330, 370, 740, 784, 392, 740, 370, 659, 330, 587, 294, 1568, 784, 1480, 740, 587, 1175, 1568, 784, 1480, 740, 587, 1175, 1568, 784, 1480, 740, 1175, 587, 1319, 659, 740, 1480, 1109, 554, 370, 294, 330, 370, 294, 370, 370, 330, 294, 330, 440, 440, 330, 277, 330, 294, 494, 440, 294, 494, 440, 294, 294, 277, 294, 330, 294, 370, 294, 330, 330, 370, 294, 294, 370, 330, 294, 330, 440, 440, 330, 277, 330, 294, 494, 440, 294, 494, 440, 294, 294, 277, 294, 330, 294, 247, 370, 370, 294, 294, 370, 370, 294, 294, 494, 440, 370, 294, 247, 277, 294, 294, 277, 294, 330, 330, 330, 370, 330, 294, 330, 220, 294, 220, 294, 220, 294, 370, 294, 370, 330, 294, 330, 247, 330, 247, 220, 277, 220, 330, 277, 392, 277, 370, 330, 370, 247, 330, 247, 294, 220, 494, 294, 440, 294, 294, 220, 494, 294, 440, 294, 294, 220, 294, 220, 277, 220, 294, 220, 330, 247, 370, 247, 220, 294, 220, 220, 294, 294, 370, 294, 370, 330, 294, 330, 247, 330, 247, 220, 277, 220, 330, 277, 277, 392, 370, 370, 370, 277, 247, 330, 294, 220, 494, 294, 294, 440, 294, 220, 494, 294, 440, 294, 294, 220, 294, 220, 277, 220, 294, 440, 247, 330, 247, 370, 220, 294, 220, 220, 294, 294, 370, 294, 370, 330, 294, 330, 247, 330, 247, 220, 277, 220, 277, 330, 330, 277, 277, 392, 277, 440, 370, 277, 330, 247, 294, 220, 494, 294, 440, 294, 220, 294, 494, 294, 440, 294, 220, 294, 294, 220, 277, 220, 220, 294, 330, 247, 247, 294, 440, 370, 330, 330, 440, 370, 330, 330, 494, 370, 330, 294, 247, 277, 294, 294, 370, 330, 294, 247, 330, 247, 220, 247, 294, 220, 247, 220, 247, 294, 220, 247, 220, 294, 330, 62, 31, 62, 123, 123, 62, 110, 55, 110, 55, 49, 98, 98, 49, 110, 55, 46, 73, 92, 73, 46, 73, 92, 73, 49, 73, 98, 73, 49, 73, 98, 73, 55, 82, 110, 82, 55, 82, 110, 82, 58, 92, 117, 92, 58, 92, 117, 92, 62, 92, 123, 92, 62, 92, 123, 92, 46, 73, 92, 73, 46, 73, 92, 73, 49, 73, 98, 73, 49, 73, 98, 73, 55, 82, 110, 82, 55, 82, 110, 82, 46, 92, 46, 73, 92, 49, 98, 49, 73, 98, 55, 110, 55, 82, 110, 58, 117, 58, 92, 117, 62, 123, 62, 92, 123, 46, 92, 46, 73, 92, 49, 98, 49, 73, 98, 55, 110, 55, 82, 110, 46, 92, 73, 46, 73, 92, 49, 98, 73, 49, 73, 98, 55, 110, 82, 55, 82, 110, 58, 117, 92, 58, 92, 117, 62, 123, 92, 62, 92, 123, 92, 65, 131, 98, 65, 98, 131, 49, 98, 73, 49, 73, 98, 55, 110, 82, 55, 82, 110, 92, 123, 123, 92, 92, 123, 117, 92, 117, 92, 92, 117, 92, 110, 110, 123, 110, 82, 78, 104, 104, 104, 49, 98, 73, 49, 73, 98, 49, 98, 73, 49, 73, 98, 55, 110, 82, 55, 82, 110, 82, 55, 82, 110, 55, 110, 82, 46, 92, 147, 92, 46, 73, 92, 73, 98, 49, 147, 98, 49, 73, 98, 73, 55, 110, 110, 165, 55, 82, 110, 82, 58, 117, 117, 185, 58, 92, 117, 92, 123, 62, 123, 185, 62, 92, 123, 92, 46, 92, 92, 147, 46, 73, 92, 73, 49, 98, 147, 98, 49, 73, 98, 73, 55, 110, 165, 110, 55, 82, 110, 82, 46, 92, 92, 147, 46, 73, 92, 73, 49, 98, 147, 98, 49, 73, 98, 73, 55, 110, 165, 110, 55, 82, 110, 82, 117, 58, 117, 185, 58, 92, 117, 92, 123, 62, 123, 185, 62, 92, 123, 92, 46, 92, 92, 147, 46, 73, 92, 73, 49, 98, 147, 98, 49, 73, 98, 73, 55, 110, 110, 165, 55, 82, 110, 82, 46, 92, 92, 147, 46, 73, 92, 73, 49, 98, 147, 98, 49, 73, 98, 73, 55, 110, 110, 165, 55, 82, 110, 82, 58, 117, 117, 185, 58, 92, 117, 92, 123, 62, 185, 123, 62, 92, 123, 92, 92, 46, 92, 147, 46, 73, 92, 73, 49, 98, 147, 98, 49, 73, 98, 73, 55, 110, 110, 165, 55, 82, 110, 82, 49, 98, 49, 117, 92, 92, 117, 92, 123, 139, 92, 185, 147, 123, 165, 92, 49, 98, 49, 73, 98, 55, 110, 55, 82, 110, 123, 62, 123, 62, 123, 62, 55, 110, 110, 55, 110, 55, 98, 49, 98, 49, 98, 49, 55, 110, 110, 55, 110, 55};


Sequence* tracks[TRACK_COUNT] = {
  new ToneSequence(3, 1578, DELTAS_3, NOTES_3),
};


void setup(){
  for(int i=0; i<TRACK_COUNT; i++){
    tracks[i]->init();
  }
}

void loop(){
  long timestamp = millis();
  for(int i=0; i<TRACK_COUNT; i++){
    tracks[i]->update(timestamp * 0.3);
  }
}
